// %%raw(`
// import './App.css';
// `)

type stateLocal = {count: int}

let {useReducer} = module (React.Uncurried)
let {string} = module (React)
let {render,querySelector} = module (ReactDOM )
let initialState = {count: 7}
let reducer = (state, action) =>
  switch action {
  | #Increment => {count: state.count + 10}
  | #Decrement => {count: state.count - 10}
  }
 
 // NEED to get rid of local state here in the controls, or at least
 // update the global state as well when we update the local one
 
@react.component
let make = (~state: Store.state, ~dispatch: Store.action => unit) => {
  let (stateLocal, dispatchLocal) = useReducer(reducer, initialState)
  <main>
    <div className="Controls">
      <header className="Controls-header">
        <div>
        <button onClick={_ => {
          dispatchLocal(.#Decrement)
          dispatch(
            Store.ChangeValue({counter:stateLocal.count}),
          )  
        }}> 
        {React.string("Decrement")} 
        </button>
        <span className="counter"> {(stateLocal.count+state.data.counter)->string_of_int->string} </span>
        <button onClick={ _ => {dispatchLocal(.#Increment);}}> {string("Increment")} </button>
      </div>
      </header>
    </div>
  </main>
}
