// Generated by ReScript, PLEASE EDIT WITH CARE


function updateCounter(s, count) {
  var init = s.data;
  return {
          data: {
            counter: count,
            thickness: init.thickness,
            width: init.width,
            depth: init.depth,
            height: init.height,
            includeEnclosure: init.includeEnclosure,
            dipFraction: init.dipFraction
          },
          svg: ""
        };
}

function updateThickness(s, t) {
  var init = s.data;
  return {
          data: {
            counter: init.counter,
            thickness: t,
            width: init.width,
            depth: init.depth,
            height: init.height,
            includeEnclosure: init.includeEnclosure,
            dipFraction: init.dipFraction
          },
          svg: ""
        };
}

function updateWidth(s, t) {
  var init = s.data;
  return {
          data: {
            counter: init.counter,
            thickness: init.thickness,
            width: t,
            depth: init.depth,
            height: init.height,
            includeEnclosure: init.includeEnclosure,
            dipFraction: init.dipFraction
          },
          svg: ""
        };
}

function updateDepth(s, t) {
  var init = s.data;
  return {
          data: {
            counter: init.counter,
            thickness: init.thickness,
            width: init.width,
            depth: t,
            height: init.height,
            includeEnclosure: init.includeEnclosure,
            dipFraction: init.dipFraction
          },
          svg: ""
        };
}

function updateHeight(s, t) {
  var init = s.data;
  return {
          data: {
            counter: init.counter,
            thickness: init.thickness,
            width: init.width,
            depth: init.depth,
            height: t,
            includeEnclosure: init.includeEnclosure,
            dipFraction: init.dipFraction
          },
          svg: ""
        };
}

function updateIncludeEnclosure(s, t) {
  var init = s.data;
  return {
          data: {
            counter: init.counter,
            thickness: init.thickness,
            width: init.width,
            depth: init.depth,
            height: init.height,
            includeEnclosure: t,
            dipFraction: init.dipFraction
          },
          svg: ""
        };
}

function updateDipFraction(s, t) {
  var init = s.data;
  return {
          data: {
            counter: init.counter,
            thickness: init.thickness,
            width: init.width,
            depth: init.depth,
            height: init.height,
            includeEnclosure: init.includeEnclosure,
            dipFraction: t
          },
          svg: ""
        };
}

function updateSVGContents(s) {
  return {
          data: s.data,
          svg: ""
        };
}

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            data: state.data,
            svg: ""
          };
  }
  switch (action.TAG | 0) {
    case /* ChangeValue */0 :
        return updateCounter(state, action.counter);
    case /* ChangeThickness */1 :
        return updateThickness(state, action._0);
    case /* ChangeWidth */2 :
        return updateWidth(state, action._0);
    case /* ChangeDepth */3 :
        return updateDepth(state, action._0);
    case /* ChangeHeight */4 :
        return updateHeight(state, action._0);
    case /* ChangeEnclosure */5 :
        return updateIncludeEnclosure(state, action._0);
    case /* ChangeDipFraction */6 :
        return updateDipFraction(state, action._0);
    
  }
}

var initialState = {
  data: {
    counter: 100,
    thickness: 0.198,
    width: 15.25,
    depth: 18.0,
    height: 1.5,
    includeEnclosure: true,
    dipFraction: 0.7
  },
  svg: ""
};

export {
  initialState ,
  updateCounter ,
  updateThickness ,
  updateWidth ,
  updateDepth ,
  updateHeight ,
  updateIncludeEnclosure ,
  updateDipFraction ,
  updateSVGContents ,
  reducer ,
  
}
/* No side effect */
