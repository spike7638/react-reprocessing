// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ReactDom from "react-dom";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Reprocessing from "reprocessing/src/Reprocessing.bs.js";
import * as Reprocessing_Env from "reprocessing/src/Reprocessing_Env.bs.js";
import * as Reprocessing_Draw from "reprocessing/src/Reprocessing_Draw.bs.js";
import * as Reprocessing_Constants from "reprocessing/src/Reprocessing_Constants.bs.js";

var s = {
  val: 100
};

function getValue(param) {
  return s.val;
}

function useReducer(prim0, prim1) {
  return React.useReducer(Curry.__2(prim0), prim1);
}

function string(prim) {
  return prim;
}

function render(prim0, prim1) {
  ReactDom.render(prim0, prim1);
  
}

function querySelector(prim) {
  return Caml_option.nullable_to_opt(document.querySelector(prim));
}

var initialState = {
  width: 100
};

function reducer(state, action) {
  return {
          width: action.width
        };
}

function Target2(Props) {
  var state = Props.state;
  React.useReducer(reducer, initialState);
  var id = "reprocessing-square";
  var setup = function (env) {
    Reprocessing_Env.size(200, 200, env);
    return s;
  };
  var draw = function (s, env) {
    Reprocessing_Draw.background(Reprocessing_Constants.red, env);
    Reprocessing_Draw.fill(Reprocessing_Constants.green, env);
    s.val = state.data.counter;
    Reprocessing_Draw.rect([
          50,
          50
        ], s.val, 100, env);
    return s;
  };
  React.useEffect(function () {
        Reprocessing.setScreenId(id);
        Reprocessing.run(setup, undefined, draw, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
        
      });
  return React.createElement("canvas", {
              id: id
            });
}

var make = Target2;

export {
  s ,
  getValue ,
  useReducer ,
  string ,
  render ,
  querySelector ,
  initialState ,
  reducer ,
  make ,
  
}
/* react Not a pure module */
